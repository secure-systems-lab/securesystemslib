name: CD
concurrency: cd

on:
  push:
    tags:
      - v*

permissions: {}

jobs:
  test:
    name: Test
    uses: ./.github/workflows/_test.yml

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout release tag
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Set up Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.x'

      - name: Install build dependency
        run: python3 -m pip install --constraint requirements-build.txt build

      - name: Build binary wheel and source tarball
        run: python3 -m build --sdist --wheel --outdir dist/ .

      - name: Store build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        # NOTE: The GitHub release page contains the release artifacts too, but using
        # GitHub upload/download actions seems robuster: there is no need to compute
        # download URLs and tampering with artifacts between jobs is more limited.
        with:
          name: build-artifacts
          path: dist

  candidate_release:
    name: Release candidate on Github for review
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write # to modify GitHub releases
    outputs:
      release_id: ${{ steps.gh-release.outputs.result }}
    steps:
      - name: Fetch build artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: build-artifacts
          path: dist

      - id: gh-release
        name: Publish GitHub release draft
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            fs = require('fs')
            res = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: process.env.REF_NAME + '-rc',
              tag_name: process.env.REF,
              body: 'Release waiting for review...',
            });

            fs.readdirSync('dist/').forEach(file => {
              github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: res.data.id,
                name: file,
                data: fs.readFileSync('dist/' + file),
              });
            });
            return res.data.id
        env:
          REF_NAME: ${{ github.ref_name }}
          REF: ${{ github.ref }}


  release:
    name: Release
    runs-on: ubuntu-latest
    needs: candidate_release
    environment: release
    permissions:
      contents: write # to modify GitHub releases
      id-token: write # to authenticate as Trusted Publisher to pypi.org
    steps:
      - name: Fetch build artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: build-artifacts
          path: dist

      - name: Publish binary wheel and source tarball on PyPI
        # Only attempt pypi upload in upstream repository
        if: github.repository == 'secure-systems-lab/securesystemslib'
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4

      - name: Finalize GitHub release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: | # zizmor: ignore[template-injection]
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ needs.candidate_release.outputs.release_id }}',
              name: process.env.REF_NAME,
              body: 'See [CHANGELOG.md](https://github.com/' +
                     context.repo.owner + '/' + context.repo.repo +
                    '/blob/' + process.env.REF_NAME + '/CHANGELOG.md) for details.'
            })
        env:
          REF_NAME: ${{ github.ref_name }}